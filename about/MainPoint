https://ru.hexlet.io/courses/js-setup-environment/lessons/entry-point/theory_unit


К текущему моменту вы уже должны были привыкнуть к записи импорта:

// импорт по умолчанию
import sloc from 'sloc';

Теперь вы уже знаете что представляет из себя sloc в общих чертах, можете загуглить репозиторий на гитхабе, изучить исходники, package.json, прочитать документацию. Но один вопрос до сих пор остается загадкой. Откуда npm знает, что мы хотим извлечь из пакета sloc когда делаем импорт? И действительно, внутри пакета может находиться десяток-другой файлов (а то и сотня), и во всех этих файлах есть функции. Как npm понимает, какую именно функцию пакет выставляет наружу по умолчанию?

Дело в том, что в package.json есть специальная секция, указывающая npm на точку входа (entry point). По умолчанию эта точка index.js в корне проекта. Многие пакеты именно ее и используют. Но если в проекте есть babel, то мы не можем просто полагаться на этот index.js, ведь это не откомпилированный код, а работающий код уже лежит в dist. Теперь все, что нужно сделать, это добавить в package.json строчку "main": "dist/index.js" и наслаждаться результатом. Ваш пакет можно ставить как зависимость и он заработает.

Точка входа одинаково работает как для экспорта по умолчанию, так и для именованных экспортов, другими словами, если она содержит export const name = ..., то импорт может стать таким import { name } from 'mylib'.
npm link

Очень удобная команда для работы - npm link. Позволяет поставить свой пакет в систему без публикации. Так вы можете убедиться в том что все работает без полного цикла выкладки.

