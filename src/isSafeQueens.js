// "Расставить на стандартной 64-клеточной шахматной доске 8 ферзей так, чтобы ни один из них не 
// находился под боем другого".

// Задачу можно обобщить следующим образом: "На шахматной доске со стороной N, 
// расставить N ферзей так, чтобы ни один из них не находился под боем другого".

// isSafeQueens.js
// Реализуйте и экспортируйте по умолчанию isSafeQueens, которая принимает комбинацию ферзей 
// в виде списка и проверяет, является ли данная расстановка решением задачи.

// Комбинации передаются следующим образом:

// (2, 4, 1, 3)

// где числа - это позиция ферзя по вертикали, а порядок числа в списке - 
// позиция ферзя по горизонтали.

const isSafeQueens = (...items) => {
  const board = [
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0]
  ]

  let result = true;

  items.map((row, col) => {
    row = row-1;

    if (board[row][col] == 1) result = false;
    
    for (let i = 0; i < 8; i++) {
      board[row][i] = 1; // заполнить текущий горизонтальный ряд единицами
      board[i][col] = 1; // заполнить текущий вертикальный ряд единицами

      // заполнить диагонали
      if (i > 0) { 
        // вправо-вниз
        if(board[row+i] != undefined && board[row+i][col+i] != undefined) {
          board[row+i][col+i] = 1;
        }

        // вправо-вверх
        if(board[row-i] != undefined && board[row-i][col+i] != undefined) {
          board[row-i][col+i] = 1;
        }

        // влево-вниз
        if(board[row+i] != undefined && board[row+i][col-i] != undefined) {
          board[row+i][col-i] = 1;
        }

        // влево-вверх
        if(board[row+i] != undefined && board[row+i][col+i] != undefined) {
          board[row+i][col+i] = 1;
        }
      }
    } 
  });

  return result;
}

// const fillDiagonal = (board, items) => {
//   console.log(board);
//   let row = 0;
//   let col = 0;

//   if (board[-1]) {
//     console.log('works');
//   } else {
//     console.log('Does not work');
//   }
// }
// fillDiagonal(isSafeQueens(1));

// Заполнять вертикали, горизонтали и диаганали. И во время заполнения делать
// проверку, если ячейка уже заполнена, то возвращать false;
// Заполнить весь горизонтальный ряд
// Заполнить весь вертикальный ряд
// Заполнирь диагонали

export default isSafeQueens;